/*
* THIS FILE IS AUTO GENERATED
* TO MODIFY IT - YOU NEED TO CHANGE THE T4 TEMPLATE --> ExampleCommandLineOptions.tt
*
*
*/
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="Core.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Clues" #>
<#@ output extension=".cs" #>
using System.Diagnostics;
using System.IO;
using System.Reflection;
using CommandLine;
using CommandLine.Text;

namespace Clues
{
    /// <summary>
    ///     For configuration details please see:
    ///     <see cref="http://commandline.codeplex.com/"/>
    ///     <see cref="https://github.com/gsscoder/commandline/wiki"></see>
    /// </summary>
    public class ConsoleOptions
    {

<# 

// GETS ALL EXAMPLES IN THE SOLUTION
var interfaceType = typeof(AppletBase);
var examples = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes()).Where(x => interfaceType.IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
.Select(x => (AppletBase)Activator.CreateInstance(x)).OrderBy((c)=>c.GetType().Name).ToList();

foreach (AppletBase ex in examples)
{ 
var name=ex.GetType().Name;
var desc=Helpers.GetClassDescription(ex.GetType()) ?? "null";

#>
	
		[VerbOption("<#= name  #>", HelpText = "<#= desc #>")]
        public <#= name  #> <#= name  #> { get; set; }
      
<# } // end of foreach

#>
       

        [HelpVerbOption("help")]
        public string GetUsage(string verb)
        {

              HelpText helpText;
            
            if (verb == null)
            {
                helpText=HelpText.AutoBuild(this,(HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current),true);
                helpText = UsageHeading(helpText);
                // usage
                helpText.AddPreOptionsLine(string.Format("Usage: \n {0} [-?] [applet [-?|options]]", Path.GetFileName(System.Reflection.Assembly.GetEntryAssembly().Location)));    
            }
            else
            {
                helpText=HelpText.AutoBuild(this, verb);
                helpText = UsageHeading(helpText);

				// additional description - specific for the applet
                var additionalDescription = System.Type.GetType("Clues." + verb + ", core").GetAttributeValue(typeof(AdditionalDescription), "Text");
                if(!string.IsNullOrEmpty(additionalDescription))
                    helpText.AddPreOptionsLine("\n" + additionalDescription);

                // applet usage example
                var usageExample = System.Type.GetType("Clues." + verb + ", core").GetAttributeValue(typeof(UsageExample),"Text");
                if(!string.IsNullOrEmpty(usageExample))
                    helpText.AddPreOptionsLine("\nUsage Example:\n" + usageExample);

                // usage
                helpText.AddPreOptionsLine("\nAvailable options for " + verb + ":");
            }


			// bug: to remove copyright it cannot be empty, so finishing the header in the copyright field
			

            return helpText;
        }

        private HelpText UsageHeading(HelpText helpText)
        {
            
        //   var assembly = Assembly.GetExecutingAssembly();
        //   var fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
        //   var version = fvi.FileVersion; // or fvi.ProductVersion
            helpText.MaximumDisplayWidth = 200;
			

            helpText.Heading = "\n------------------------------------------------------ \n";
            helpText.Heading += "PI-AF-SDK: Command Line Utility and ExampleS (CLUES) \n";
         //   helpText.Heading += "Version: " + version + " \n";
            helpText.Heading += "Copyright 2015 OSIsoft - PI Developers Club\n";
            helpText.Heading += "Source code: github.com/osisoft/PI-AF-SDK-clues\n";
            helpText.Heading += "Licensed under the Apache License, Version 2.0";
            helpText.Copyright= "------------------------------------------------------ ";
            return helpText;
        }
    }

}
